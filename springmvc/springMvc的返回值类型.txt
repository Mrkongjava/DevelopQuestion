
    

spring mvc处理方法支持如下的返回方式：ModelAndView, Model, ModelMap, Map,View, String, void。下面将对具体的一一进行说明：




----------------------------------------------------------------------------------------------------------------------------------------------------------------


ModelAndView、


    @RequestMapping("/show1")  
    public ModelAndView show1(HttpServletRequest request,HttpServletResponse response) throws Exception {  
           ModelAndView mav = new ModelAndView("/demo2/show");  
           mav.addObject("account", "account -1");  
           return mav;  
       }  


通过ModelAndView构造方法可以指定返回的页面名称，也可以通过setViewName()方法跳转到指定的页面 ,使用addObject()设置需要返回的值，addObject()有几个不同参数的方法，可以默认

和指定返回对象的名字。调用addObject()方法将值设置到一个名为ModelMap的类属性，ModelMap是LinkedHashMap的子类，具体请看类。






----------------------------------------------------------------------------------------------------------------------------------------------------------------




Model 是一个接口， 其实现类为ExtendedModelMap，继承了ModelMap类。

Map 


    	@RequestMapping("/demo2/show")  
        public Map<String, String> getMap() {  

            Map<String, String> map = new HashMap<String, String>();  
            map.put("key1", "value-1");  
            map.put("key2", "value-2");  

            return map;  
        }  


在jsp页面中可直通过jstl标签的${key1}获得到值, map.put()相当于request.setAttribute方法。也可以通过jsp标签的request.getAttribute（key1）获得；写例子时发现，key值包括 

- . 时会有问题.  View 可以返回pdf excel等，暂时没详细了解。








---------------------------------------------------------------------------------------------------------------------------------------------------------------



String 指定返回的视图页面名称，结合设置的返回地址路径加上页面名称后缀即可访问到。注意：如果方法声明了注解@ResponseBody ，则会直接将返回值输出到请求页面。


例如：


    @RequestMapping(value = "/something", method = RequestMethod.GET)  
    @ResponseBody  
    public String helloWorld()  {  
    return "Hello World";  
    }  

上面的结果会将文本"Hello World "直接写到http响应流。跳转的页面是请求的页面。

------------------------------------------------------------------------------------



返回值类型是String，但是没有声明了注解@ResponseBody，会直接跳转到字符串center指定的页面，当然center要加上前缀和后缀。

并且返回值是String类型还可以结合model使用，使用model.setAttribute("对象名",对象值);方法来添加返回值。


    @RequestMapping("/welcome")  
    public String welcomeHandler() {  
      return "center";  
    }  


对应的逻辑视图名为“center”，URL= prefix前缀+视图名称 +suffix后缀组成。



----------------------------------------------------------------------------------------------------------------------------------------------------------------









void  如果返回值为空，则响应的视图页面对应为访问地址


    @RequestMapping("/welcome")  
    public void welcomeHandler() {}  


此例对应的逻辑视图名为"welcome"。



----------------------------------------------------------------------------------------------------------------------------------------------------------------


小结：


1.使用 String 作为请求处理方法的返回值类型是比较通用的方法，这样返回的逻辑视图名不会和请求 URL 绑定，具有很大的灵活性，而模型数据又可以通过 ModelMap 控制。
2.使用void,map,Model 时，返回对应的逻辑视图名称真实url为：prefix前缀+视图名称 +suffix后缀组成。这里的视图名称指的是请求的视图名称。
3.使用String,ModelAndView返回视图名称可以不受请求的url绑定，ModelAndView可以设置返回的视图名称。 

4、当返回值的 类型是String的时候需要注意，如果方法声明了注解@ResponseBody ，则会直接将返回值输出到请求页面；如果方法没有声明@ResponseBody，就会跳转到返回值指定的页面上。






























