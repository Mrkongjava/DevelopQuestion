List,Set,Map是否继承自Collection接口？ 

答：List，Set是，Map不是。 



如图： 　│

      Collection 
         ├List 
         │ ├LinkedList 
         │ ├ArrayList 
         │ └Vector 
         │     └Stack 
         └Set 
 

　       　Map 
　　        ├Hashtable 
　        　├HashMap 
　        　└WeakHashMap 






Collection是最基本的集合接口，一个Collection代表一组Object，即Collection的元素。一些Collection允许相同的元素而另一些不行。一些能排序而另一些不行。Java JDK不能提供直接继承自Collection的类，Java JDK提供的类都是继承自Collection的"子接口"，如:List和Set。 

注意：Map没有继承Collection接口，Map提供key到value的映射。一个Map中不能包含相同key，每个key只能映射一个value。Map接口提供3种集合的视图，Map的内容可以被当做一组key集合，一组value集合，或者一组key-value映射。 






详细介绍：



List特点：元素有放入顺序，元素可重复，可存放不同的数据类型。List接口有三个实现类，分别是LinkedList，ArrayList，Vector 
 

	ArrayList：底层用数组来实现，每一个元素下面都有一个下标；查询效率高，添加删除慢。

	LinkedList： 底层用双向链表来实现，链表内存是散乱的，每一个元素存储本身内存地址的同时还存储下一个元素的地址。查询效率低，添加删除快

	Vector：底层也用数组实现；它是一个线程安全的ArrayList；应用与多线程


	ArrayList和Vector的区别：ArrayList是非线程安全的，效率高；Vector是基于线程安全的，效率低 




Set特点：元素无放入顺序，元素不可重复（注意：元素虽然无放入顺序，但是元素在set中的位置是有该元素的HashCode决定的，其位置其实是固定的）

	
	HashSet(底层由HashMap实现)：1、它里面的数据没有下标的，所以不能用for循环来遍历，只能用Iterator(迭代器)；
				    2、底层代码用"哈希表"来实现。
				    3、不能保证元素的排列顺序，顺序有可能发生变化
				    4、不是同步的 
				    5、集合元素可以是null,但只能放入一个null


	LinkedHashSet ：1、同样是根据元素的hashCode值来决定元素的存储位置，但是它同时使用链表维护元素的次序。这样使得元素看起 来像是以插入顺序保存的，也就是说，当遍历该集合时候，
			2、将会以元素的添加顺序访问集合的元素。
			3、在迭代访问Set中的全部元素时，性能比HashSet好，但是插入时性能稍微逊色于HashSet。

	



Map特点：元素按键值对存储，无放入顺序 

 	HashMap：非线程安全（非同步的，多个线程访问的时候需要手动添加代码实现为每个线程实现同步），高效，支持null；支持key或value为null。

	HashTable：线程安全（同步的，即使多个线程访问，每个线程所得的结果都是不一样的），低效，不支持null ；不支持key或value为null。

	LinkeHashMap 




 
其实最主要的是，list是用来处理序列的，而set是用来处理集的。Map是知道的，存储的是键值对

SortedSet接口有一个实现类：TreeSet（底层由平衡二叉树实现） 

Query接口有一个实现类：LinkList 

SortedMap有一个实现类：TreeMap 




写一段代码，遍历一个List中的元素 

List、Map、Set三个接口，存取元素时，各有什么特点？

  
import java.util.*;
public class Test
{
public static void main(String [] arge)
{
List list = new ArrayList();
list.add(0, "a");
list.add(1, "b");
list.add(2, "c");
list.add(3, "d");
while(Iterator it = list.iterator();it.hasNext())
{
   Object element = it.next();
   System.out.println (element);
}
}
}
List、Map、Set
List 通过下标来存取 和值来存取
Map 键值对应来存取 
set 存取元素是无序的
--------------------------------------------------------------------
package com.operation;
import java.util.ArrayList;
import java.util.HashSet;
import java.util.Iterator;
import java.util.List;
import java.util.Set;
import java.util.TreeSet;
public class User {
private Integer userId;
private String userName;
private String address;
public User(int userId, String userName, String address) {
   this.userId = userId;
   this.userName = userName;
   this.address = address;
}

public String getAddress() {
   return address;
}

public void setAddress(String address) {
   this.address = address;
}

public Integer getUserId() {
   return userId;
}

public void setUserId(Integer userId) {
   this.userId = userId;
}

public String getUserName() {
   return userName;
}

public void setUserName(String userName) {
   this.userName = userName;
}

public static void main(String[] args) {
//   Map<Integer, User> map = new TreeMap<Integer, User>();
//   map.put(1, new User(1,"李伟","beijing"));
//   map.put(2, new User(2,"王文军","beijing"));
//  
//   map.put(4, new User(2,"abc","beijing"));
//   map.put(5, new User(2,"abc","beijing"));
//  
//  
//  
//   Set<Integer> keys = map.keySet();
//  
////   Iterator<Integer> it = keys.iterator();
////   while (it.hasNext()) {
////    Integer key = it.next();
////    User user = map.get(key);
////    System.out.println("key = " + key + "\t" + "value = " + user.getUserName());
////   }
//  
//   for (Integer key : keys) {
//    User user1 = map.get(key);
//    System.out.println("key = " + key + "\t" + "value = " + user1.getUserName());
//   }
 
  
   Set<String> set = new HashSet<String>();
   set.add("a");
   set.add("b");
   set.add("c");
   set.add("d");
   set.add("d");
   set.add("d");
   set.add("d");
   set.add("uuu");
   set.add("e");
  
  
   Iterator<String> it = set.iterator();
   while (it.hasNext()) {
    System.out.println(it.next());
   }
  
}
}

































