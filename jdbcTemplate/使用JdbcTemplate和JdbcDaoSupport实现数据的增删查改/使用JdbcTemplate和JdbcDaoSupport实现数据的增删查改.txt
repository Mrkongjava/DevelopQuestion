



1、使用jdbcTemplate和jdbcDaoSupport实现对数据库中的数据的增删该查：




-------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------


首先书写实体类：



public class Employee {
	
	private Integer id;
	private String lastName;
	private String email;
	
	private Integer dpetId;

	接着是对应的get、set方法

	@Override
	public String toString() {
		return "Employee [id=" + id + ", lastName=" + lastName + ", email="
				+ email + ", dpetId=" + dpetId + "]";
	}
}



-------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------



接着书写资源配置文件db.properties



jdbc.user=root
jdbc.password=123456
jdbc.driverClass=com.mysql.jdbc.Driver
jdbc.jdbcUrl=jdbc:mysql:///spring

jdbc.initPoolSize=5
jdbc.maxPoolSize=10


==================================================================================


紧接着到spring的xml配置文件


<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"
	xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
	xmlns:context="http://www.springframework.org/schema/context"
	xmlns:tx="http://www.springframework.org/schema/tx"
	xsi:schemaLocation="http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans.xsd
		http://www.springframework.org/schema/tx http://www.springframework.org/schema/tx/spring-tx-4.0.xsd
		http://www.springframework.org/schema/context http://www.springframework.org/schema/context/spring-context-4.0.xsd">

	<!--自动扫描包-->
	<context:component-scan base-package="com.atguigu.spring"></context:component-scan>
	
	<!-- 导入资源文件 -->
	<context:property-placeholder location="classpath:db.properties"/>
	
	<!-- 配置 C3P0 数据源 -->
	<bean id="dataSource"
		class="com.mchange.v2.c3p0.ComboPooledDataSource">
		<property name="user" value="${jdbc.user}"></property>
		<property name="password" value="${jdbc.password}"></property>
		<property name="jdbcUrl" value="${jdbc.jdbcUrl}"></property>
		<property name="driverClass" value="${jdbc.driverClass}"></property>

		<property name="initialPoolSize" value="${jdbc.initPoolSize}"></property>
		<property name="maxPoolSize" value="${jdbc.maxPoolSize}"></property>
	</bean>
	
	<!-- 配置 Spirng 的 JdbcTemplate ，若在spring中使用jdbc就一定使用jdbcTemplate-->
	<bean id="jdbcTemplate" 
		class="org.springframework.jdbc.core.JdbcTemplate">
		<property name="dataSource" ref="dataSource"></property>
	</bean>
	
</beans>



===================================================================================================================


最后是测试代码：package com.atguigu.spring.jdbc;



public class JDBCTest {
	
	private ApplicationContext ctx = null;
	private JdbcTemplate jdbcTemplate;
//	private EmployeeDao employeeDao;
//	private DepartmentDao departmentDao;
//	private NamedParameterJdbcTemplate namedParameterJdbcTemplate;
	
	{
		ctx = new ClassPathXmlApplicationContext("applicationContext.xml");
		jdbcTemplate = (JdbcTemplate) ctx.getBean("jdbcTemplate");
//		employeeDao = ctx.getBean(EmployeeDao.class);
//		departmentDao = ctx.getBean(DepartmentDao.class);
//		namedParameterJdbcTemplate = ctx.getBean(NamedParameterJdbcTemplate.class);
	}
	
	/**
	 * 使用具名参数时, 可以使用 update(String sql, SqlParameterSource paramSource) 方法进行更新操作
	 * 1. SQL 语句中的参数名和类的属性一致!
	 * 2. 使用 SqlParameterSource 的 BeanPropertySqlParameterSource 实现类作为参数. 
	 */
//	@Test
//	public void testNamedParameterJdbcTemplate2(){
//		String sql = "INSERT INTO employees(last_name, email, dept_id) "
//				+ "VALUES(:lastName,:email,:dpetId)";
//		
//		Employee employee = new Employee();
//		employee.setLastName("XYZ");
//		employee.setEmail("xyz@sina.com");
//		employee.setDpetId(3);
//		
//		SqlParameterSource paramSource = new BeanPropertySqlParameterSource(employee);
//		namedParameterJdbcTemplate.update(sql, paramSource);
//	}
//	
//	/**
//	 * 可以为参数起名字. 
//	 * 1. 好处: 若有多个参数, 则不用再去对应位置, 直接对应参数名, 便于维护
//	 * 2. 缺点: 较为麻烦. 
//	 */
//	@Test
//	public void testNamedParameterJdbcTemplate(){
//		String sql = "INSERT INTO employees(last_name, email, dept_id) VALUES(:ln,:email,:deptid)";
//		
//		Map<String, Object> paramMap = new HashMap<String, Object>();
//		paramMap.put("ln", "FF");
//		paramMap.put("email", "ff@atguigu.com");
//		paramMap.put("deptid", 2);
//		
//		namedParameterJdbcTemplate.update(sql, paramMap);
//	}
//	
//	@Test
//	public void testDepartmentDao(){
//		System.out.println(departmentDao.get(1));
//	}
//	
//	@Test
//	public void testEmployeeDao(){
//		System.out.println(employeeDao.get(1));
//	}
//	
	
	
	
	
	
	
	
//----------------------------------------------------------------------------------------------------------------------------------------	
	
	
	
	/**
	 * 获取单个列的值, 或做统计查询
	 * 使用 queryForObject(String sql, Class<Long> requiredType) 
	 * 
	 * 下面是插叙有多少条记录
	 */
	@Test
	public void testQueryForObject2(){
		String sql = "SELECT count(id) FROM employees";
		long count = jdbcTemplate.queryForObject(sql, Long.class);
		
		System.out.println(count);
	}

	
	
	
	
	
	
	
	
	
	/**
	 * 查到实体类的集合，即查到一个表中记录的集合
	 * 注意调用的不是 queryForList 方法
	 */
	@Test
	public void testQueryForList(){
		String sql = "SELECT id, last_name lastName, email FROM employees WHERE id > ?";
		RowMapper<Employee> rowMapper = new BeanPropertyRowMapper<Employee>(Employee.class);
		List<Employee> employees = jdbcTemplate.query(sql, rowMapper,5);
		
		System.out.println(employees);
	}
	
	
	
	
	
	
	
	
	/**
	 * 从数据库中获取一条记录, 实际得到对应的一个对象
	 * 注意不是调用 queryForObject(String sql, Class<Employee> requiredType, Object... args) 方法!这方法是获取指定对象的指定记录的
	 * 而需要调用 queryForObject(String sql, RowMapper<Employee> rowMapper, Object... args)
	 * 1. 其中的 RowMapper 指定如何去映射结果集的行, 常用的实现类为 BeanPropertyRowMapper
	 * 2. 使用 SQL 中列的别名完成列名和类的属性名的映射. 例如 last_name lastName
	 * 3. 不支持级联属性. JdbcTemplate 到底是一个 JDBC 的小工具, 而不是 ORM 框架
	 */
	@Test
	public void testQueryForObject(){
		
		/*
		 * 在sql语句中通过列的别名last_name关联到实体类的属性名lastName（last_name lastName）
		 * 
		 * 在sql语句中本想使用代码dept_id as \"department.id\" 实现级联属性的插叙，即查询表中字段dept_id对应实体类的的department属性中所存储的另一个实体类的对象引用对象的ID属性
		 * 因为不支持级联查询，因此结果为null
		 */
		String sql = "SELECT id, last_name lastName, email, dept_id as \"department.id\" FROM employees WHERE id = ?";
		RowMapper<Employee> rowMapper = new BeanPropertyRowMapper<Employee>(Employee.class);
		Employee employee = jdbcTemplate.queryForObject(sql, rowMapper, 1);
		
		System.out.println(employee);
	}
	
	
	
	
	
	
	/**
	 * 执行批量更新: 批量的 INSERT, UPDATE, DELETE
	 * 最后一个参数是 Object[] 的 List 类型: 因为修改一条记录需要一个 Object 的数组, 那么多条不就需要多个 Object 的数组吗
	 */
	@Test
	public void testBatchUpdate(){
		String sql = "INSERT INTO employees(last_name, email, dept_id) VALUES(?,?,?)";
		
		List<Object[]> batchArgs = new ArrayList<Object[]>();
		
		batchArgs.add(new Object[]{"AA", "aa@atguigu.com", 1});
		batchArgs.add(new Object[]{"BB", "bb@atguigu.com", 2});
		batchArgs.add(new Object[]{"CC", "cc@atguigu.com", 3});
		batchArgs.add(new Object[]{"DD", "dd@atguigu.com", 3});
		batchArgs.add(new Object[]{"EE", "ee@atguigu.com", 2});
		
		//传入一个sql语句和一个Object数组
		jdbcTemplate.batchUpdate(sql, batchArgs);
	}
	
	
	
	
	
	/**
	 * 
	 * 单个更新
	 * 
	 * 执行 INSERT, UPDATE, DELETE，
	 */
	@Test
	public void testUpdate(){
		
		//修改指定ID的last_属性的属性值
		String sql = "UPDATE employees SET last_name = ? WHERE id = ?";
		jdbcTemplate.update(sql, "Jack",1);
	}
	
	
	
	
	
	//测试是否连接上
	@Test
	public void testDataSource() throws SQLException {
		DataSource dataSource = ctx.getBean(DataSource.class);
		System.out.println(dataSource.getConnection());
	}

}


============================================================================================================











